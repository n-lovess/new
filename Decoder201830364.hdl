CHIP Decoder201830364 {
    IN A, B, C, D;
    OUT a, b, c, d, e, f, g;


    PARTS:

    // Segment a
    Not (in=A, out=notA); 
    Not (in=B, out=notB); 
    Not (in=C, out=notC); 
    Not (in=D, out=notD); 

    And (a=notA, b=C, out=anda1.1); 
    And (a=anda1.1, b=notD, out=anda1); 
    And (a=notA, b=C, out=anda2.1); 
    And (a=anda2.1, b=notB, out=anda2); 
    And (a=A, b=notB, out=anda3.1); 
    And (a=anda3.1, b=notD, out=anda3); 
    And (a=A, b=notB, out=anda4.1); 
    And (a=anda4.1, b=notC, out=anda4); 
    And (a=B, b=notC, out=anda5.1); 
    And (a=anda5.1, b=D, out=anda5); 
    And (a=B, b=notC, out=anda6.1); 
    And (a=anda6.1, b=notA, out=anda6); 
    And (a=A, b=C, out=anda7.1); 
    And (a=anda7.1, b=B, out=anda7); 
    And (a=A, b=C, out=anda8.1); 
    And (a=anda8.1, b=D, out=anda8); 
    Or (a=anda1, b=anda2, out=ora1); 
    Or (a=ora1, b=anda3, out=ora2); 
    Or (a=ora2, b=anda4, out=ora3); 
    Or (a=ora3, b=anda5, out=ora4); 
    Or (a=ora4, b=anda6, out=ora5); 
    Or (a=ora5, b=anda7, out=ora6); 
    Or (a=ora6, b=anda8, out=a); 


    // Segment b
    Not(in=A, out=notAb);
    Not(in=B, out=notBb);
    Not(in=C, out=notCb);
    Not(in=D, out=notDb);

    And(a=notAb, b=notBb, out=term1ab);
    And(a=term1ab, b=notDb, out=term1b);

    And(a=C, b=notDb, out=term2b);

    And(a=A, b=B, out=term3b);

    And(a=A, b=C, out=term4b);

    And(a=A, b=notCb, out=term5ab);
    And(a=term5ab, b=notD, out=term5b);

    Or(a=term1b, b=term2b, out=ans1b);
    Or(a=term3b, b=term4b, out=ans2ab);
    Or(a=term5b, b=ans2ab, out=ans2b);
    Or(a=ans1b, b=ans2b, out=b);
    

    // Segment c
    Not(in=A, out=notA);
    Not(in=B, out=notB);
    Not(in=C, out=notC);
    Not(in=D, out=notD);

    And(a=C, b=notD, out=termC1);
    And(a=A, b=C, out=termC2);
    And(a=A, b=D, out=termC3);
    And(a=A, b=notB, out=termC4);
    And(a=notB, b=C, out=termC5);
    And(a=notA, b=B, out=termCp6);
    And(a=termCp6, b=notC, out=termC6);

    Or(a=termC1, b=termC2, out=interC1);
    Or(a=termC3, b=termC4, out=interC2);
    Or(a=termC5, b=termC6, out=interC3);
    Or(a=interC1, b=interC2, out=interC4);
    Or(a=interC3, b=interC4, out=c);


    // Segment d
    Not(in=A, out=notA);
    Not(in=B, out=notB);
    Not(in=C, out=notC);
    Not(in=D, out=notD);

    And(a=notA, b=B, out=term1a);
    And(a=term1a, b=notC, out=term1);

    And(a=A, b=notB, out=term2);

    And(a=A, b=C, out=term3);

    And(a=notC, b=notD, out=term4);

    And(a=B, b=notD, out=term5);

    Or(a=term1, b=term2, out=ans1);
    Or(a=term3, b=term4, out=ans2a);
    Or(a=term5, b=ans2a, out=ans2);
    Or(a=ans1, b=ans2, out=d);
    

    // Segment e

    Not(in=A, out=notA);
    Not(in=B, out=notB);
    Not(in=C, out=notC);
    Not(in=D, out=notD);

    And(a=notA, b=B, out=term1);       // notA AND B
    And(a=A, b=notB, out=term2);          // A AND notB
    And(a=notC, b=D, out=term3);          // notC AND D
    And(a=notA, b=notC, out=term4);    // notA AND notC
    And(a=notA, b=D, out=term5);          // notA AND D

    Or(a=term1, b=term2, out=inter1);
    Or(a=term3, b=term4, out=inter2);
    Or(a=inter1, b=inter2, out=inter3);
    Or(a=inter3, b=term5, out=e);
    

    // Segment f
    Not(in=A, out=notA);
    Not(in=B, out=notB);
    Not(in=C, out=notC);
    Not(in=D, out=notD);

    And(a=notA, b=C, out=term1);
    And(a=B, b=C, out=term2);
    And(a=notB, b=C, out=term3part1);
    And(a=term3part1, b=notD, out=term3);
    And(a=notA, b=B, out=term4part1);
    And(a=term4part1, b=D, out=term4);
    And(a=A, b=notB, out=term5part1);
    And(a=term5part1, b= notC, out=term5);
    And(a=notB, b=notC, out=term6part1);
    And(a=term6part1, b=notD, out=term6);
    And(a=A, b=notC, out= term7part1);
    And(a=term7part1, b=notD, out=term7);


    Or(a=term1, b=term2, out=inter1);
    Or(a=term3, b=term4, out=inter2);
    Or(a=inter1, b=inter2, out=inter3);
    Or(a=term5, b=term6, out=inter4);
    Or(a=inter4, b=term7, out=inter5);
    Or(a=inter3, b=inter5, out=f);
    

    // Segment g
    Not(in= A, out= NotA);
    Not(in= B, out= NotB);
    Not(in= C, out= NotC);
    Not(in= D, out= NotD);

    And(a = NotA,b = NotB, out= PartA);



    And(a = NotA, b= B, out = firstHalfG);
    And(a = NotC, b= NotD, out= SecondHalfG);
    And(a= firstHalfG, b= SecondHalfG, out=PartG);

    And(a= NotA, b= B, out=FirstHalfB);
    And(a= C, b= D, out=SecondHalfB);
    And(a=FirstHalfB, b=SecondHalfB, out=PartB);

    And(a= A, b= NotB, out=FirstHalfC);
    And(a= NotC, b= NotD, out=SecondHalfC);
    And(a=FirstHalfC, b=SecondHalfC, out=PartC);

    And(a= A, b= NotB, out=FirstHalfD);
    And(a= C, b= NotD, out=SecondHalfD);
    And(a=FirstHalfD, b=SecondHalfD, out=PartD);

    And(a= A, b= B, out=FirstHalfE);
    And(a= NotC, b= D, out=SecondHalfE);
    And(a=FirstHalfE, b=SecondHalfE, out=PartE);


    And(a= A, b= NotB, out=FirstHalfF);
    And(a= NotC, b= D, out=SecondHalfF);
    And(a=FirstHalfF, b=SecondHalfF, out=PartF);


    Or(a= PartA, b= PartB, out=FirstThird);
    Or(a= PartC, b= PartD, out=SecondThird);
    Or(a= PartE, b=PartF, out= ThirdThirds);
    Or(a= FirstThird, b= SecondThird, out=TwoThirds);
    Or(a= TwoThirds, b= ThirdThirds, out=nearFinal);
    Or(a= nearFinal, b=PartG, out= g);


}