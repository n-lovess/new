CHIP Decoder201830364 {
    IN A, B, C, D;
    OUT a, b, c, d, e, f, g;

    PARTS:
    // Segment a
    Not(in=A, out=notAa);
    Not(in=B, out=notBa);
    Not(in=C, out=notCa);
    Not(in=D, out=notDa);
    And(a=notAa, b=notBa, out=term1a);
    And(a=notCa, b=notDa, out=term2a);
    And(a=A, b=notBa, out=term3a);
    Or(a=term1a, b=term2a, out=inter1a);
    Or(a=inter1a, b=term3a, out=a);

    // Segment b
    Not(in=A, out=notAb);
    Not(in=B, out=notBb);
    Not(in=C, out=notCb);
    Not(in=D, out=notDb);
    And(a=notAb, b=notBb, out=term1b);
    And(a=B, b=C, out=term2b);
    And(a=notCb, b=notDb, out=term3b);
    Or(a=term1b, b=term2b, out=inter1b);
    Or(a=inter1b, b=term3b, out=b);

    // Segment c
    Not(in=A, out=n1c);
    Not(in=B, out=n2c);
    Not(in=C, out=n3c);
    Not(in=D, out=n4c);
    And(a=n1c, b=n2c, out=temp0c);
    And(a=temp0c, b=n3c, out=temp20c);
    And(a=temp20c, b=n4c, out=on0c);
    And(a=n1c, b=n2c, out=temp2c);
    And(a=temp2c, b=C, out=temp22c);
    And(a=temp22c, b=n4c, out=on2c);
    And(a=n1c, b=B, out=temp6c);
    And(a=temp6c, b=C, out=temp26c);
    And(a=temp26c, b=n4c, out=on6c);
    And(a=A, b=n2c, out=temp8c);
    And(a=temp8c, b=n3c, out=temp28c);
    And(a=temp28c, b=n4c, out=on8c);
    And(a=A, b=n2c, out=tempAc);
    And(a=tempAc, b=C, out=temp2Ac);
    And(a=temp2Ac, b=n4c, out=onAc);
    And(a=A, b=n2c, out=tempbc);
    And(a=tempbc, b=C, out=temp2bc);
    And(a=temp2bc, b=D, out=onbc);
    And(a=A, b=B, out=tempCc);
    And(a=tempCc, b=n3c, out=temp2Cc);
    And(a=temp2Cc, b=n4c, out=onCc);
    And(a=A, b=B, out=tempdc);
    And(a=tempdc, b=n3c, out=temp2dc);
    And(a=temp2dc, b=D, out=ondc);
    And(a=A, b=B, out=tempEc);
    And(a=tempEc, b=C, out=temp2Ec);
    And(a=temp2Ec, b=n4c, out=onEc);
    And(a=A, b=B, out=tempFc);
    And(a=tempFc, b=C, out=temp2Fc);
    And(a=temp2Fc, b=D, out=onFc);
    Or(a=on0c, b=on2c, out=on02c);
    Or(a=on02c, b=on6c, out=on026c);
    Or(a=on026c, b=on8c, out=on0268c);
    Or(a=on0268c, b=onAc, out=on0268Ac);
    Or(a=on0268Ac, b=onbc, out=on0268Abc);
    Or(a=on0268Abc, b=onCc, out=on0268AbCc);
    Or(a=on0268AbCc, b=ondc, out=on0268AbCdc);
    Or(a=on0268AbCdc, b=onEc, out=on0268AbCdEc);
    Or(a=on0268AbCdEc, b=onFc, out=c);

    // Segment d
    Not(in=A, out=notA);
    Not(in=B, out=notB);
    Not(in=C, out=notC);
    Not(in=D, out=notD);
    And(a=notA, b=B, out=term1a);
    And(a=term1a, b=notC, out=term1);
    And(a=A, b=notB, out=term2);
    And(a=A, b=C, out=term3);
    And(a=notC, b=notD, out=term4);
    And(a=B, b=notD, out=term5);
    Or(a=term1, b=term2, out=ans1);
    Or(a=term3, b=term4, out=ans2a);
    Or(a=term5, b=ans2a, out=ans2);
    Or(a=ans1, b=ans2, out=d);

    // Segment e
    Not(in=A, out=notAe);
    Not(in=B, out=notBe);
    Not(in=C, out=notCe);
    Not(in=D, out=notDe);
    And(a=notAe, b=B, out=term1e);
    And(a=A, b=notBe, out=term2e);
    And(a=notCe, b=D, out=term3e);
    And(a=notAe, b=notCe, out=term4e);
    And(a=notAe, b=D, out=term5e);
    Or(a=term1e, b=term2e, out=inter1e);
    Or(a=term3e, b=term4e, out=inter2e);
    Or(a=inter1e, b=inter2e, out=inter3e);
    Or(a=inter3e, b=term5e, out=e);

    // Segment f
    Not(in=A, out=notAf);
    Not(in=B, out=notBf);
    Not(in=C, out=notCf);
    Not(in=D, out=notDf);
    And(a=notAf, b=B, out=term1f);
    And(a=A, b=notBf, out=term2f);
    And(a=notAf, b=C, out=term3f);
    And(a=notAf, b=D, out=term4f);
    And(a=notBf, b=notCf, out=term5f);
    Or(a=term1f, b=term2f, out=inter1f);
    Or(a=term3f, b=term4f, out=inter2f);
    Or(a=inter1f, b=inter2f, out=inter3f);
    Or(a=inter3f, b=term5f, out=f);

    // Segment g
    Not(in=A, out=notAg);
    Not(in=B, out=notBg);
    Not(in=C, out=notCg);
    Not(in=D, out=notDg);
    And(a=notBg, b=C, out=term1g);
    And(a=B, b=notCg, out=term2g);
    And(a=B, b=notDg, out=term3g);
    Or(a=term1g, b=term2g, out=inter1g);
    Or(a=inter1g, b=term3g, out=g);
}
