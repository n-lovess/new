CHIP Decoder201830364 {
    IN A, B, C, D;
    OUT a, b, c, d, e, f, g;

    PARTS:
    // Segment a
    Not(in=A, out=notAa);
    Not(in=B, out=notBa);
    Not(in=C, out=notCa);
    Not(in=D, out=notDa);
    And(a=notAa, b=notBa, out=term1a);
    And(a=notCa, b=notDa, out=term2a);
    And(a=A, b=notBa, out=term3a);
    Or(a=term1a, b=term2a, out=inter1a);
    Or(a=inter1a, b=term3a, out=a);

    // Segment b
    Not(in=A, out=notAb);
    Not(in=B, out=notBb);
    Not(in=C, out=notCb);
    Not(in=D, out=notDb);
    And(a=notAb, b=notBb, out=term1b);
    And(a=B, b=C, out=term2b);
    And(a=notCb, b=notDb, out=term3b);
    Or(a=term1b, b=term2b, out=inter1b);
    Or(a=inter1b, b=term3b, out=b);

    // Segment c 
    Not(in=A, out=n1);
    Not(in=B, out=n2);
    Not(in=C, out=n3);
    Not(in=D, out=n4);
    And(a=n1, b=n2, out=temp0);
    And(a=temp0, b=n3, out=temp20);
    And(a=temp20, b=n4, out=on0);
    And(a=n1, b=n2, out=temp2);
    And(a=temp2, b=C, out=temp22);
    And(a=temp22, b=n4, out=on2);
    And(a=n1, b=B, out=temp6);
    And(a=temp6, b=C, out=temp26);
    And(a=temp26, b=n4, out=on6);
    And(a=A, b=n2, out=temp8);
    And(a=temp8, b=n3, out=temp28);
    And(a=temp28, b=n4, out=on8);
    And(a=A, b=n2, out=tempA);
    And(a=tempA, b=C, out=temp2A);
    And(a=temp2A, b=n4, out=onA);
    And(a=A, b=n2, out=tempb);
    And(a=tempb, b=C, out=temp2b);
    And(a=temp2b, b=D, out=onb);
    And(a=A, b=B, out=tempC);
    And(a=tempC, b=n3, out=temp2C);
    And(a=temp2C, b=n4, out=onC);
    And(a=A, b=B, out=tempd);
    And(a=tempd, b=n3, out=temp2d);
    And(a=temp2d, b=D, out=ond);
    And(a=A, b=B, out=tempE);
    And(a=tempE, b=C, out=temp2E);
    And(a=temp2E, b=n4, out=onE);
    And(a=A, b=B, out=tempF);
    And(a=tempF, b=C, out=temp2F);
    And(a=temp2F, b=D, out=onF);
    Or(a=on0, b=on2, out=on02);
    Or(a=on02, b=on6, out=on026);
    Or(a=on026, b=on8, out=on0268);
    Or(a=on0268, b=onA, out=on0268A);
    Or(a=on0268A, b=onb, out=on0268Ab);
    Or(a=on0268Ab, b=onC, out=on0268AbC);
    Or(a=on0268AbC, b=ond, out=on0268AbCd);
    Or(a=on0268AbCd, b=onE, out=on0268AbCdE);
    Or(a=on0268AbCdE, b=onF, out=c);

    // Segment d 
    Not(in=A, out=notAd);
    Not(in=B, out=notBd);
    Not(in=C, out=notCd);
    Not(in=D, out=notDd);
    And(a=notAd, b=B, out=term1ad);
    And(a=term1ad, b=notCd, out=term1d);
    And(a=A, b=notBd, out=term2d);
    And(a=A, b=C, out=term3d);
    And(a=notCd, b=notDd, out=term4d);
    And(a=B, b=notDd, out=term5d);
    Or(a=term1d, b=term2d, out=ans1d);
    Or(a=term3d, b=term4d, out=ans2ad);
    Or(a=term5d, b=ans2ad, out=ans2d);
    Or(a=ans1d, b=ans2d, out=d);

    // Segment e 
    Not(in=A, out=notAe);
    Not(in=B, out=notBe);
    Not(in=C, out=notCe);
    Not(in=D, out=notDe);
    And(a=notAe, b=B, out=term1e);
    And(a=A, b=notBe, out=term2e);
    And(a=notCe, b=D, out=term3e);
    And(a=notAe, b=notCe, out=term4e);
    And(a=notAe, b=D, out=term5e);
    Or(a=term1e, b=term2e, out=inter1e);
    Or(a=term3e, b=term4e, out=inter2e);
    Or(a=inter1e, b=inter2e, out=inter3e);
    Or(a=inter3e, b=term5e, out=e);

    // Segment f 
    Not(in=A, out=notAf);
    Not(in=B, out=notBf);
    Not(in=C, out=notCf);
    Not(in=D, out=notDf);
    And(a=notAf, b=B, out=term1f);
    And(a=A, b=notBf, out=term2f);
    And(a=notAf, b=C, out=term3f);
    And(a=notAf, b=D, out=term4f);
    And(a=notBf, b=notCf, out=term5f);
    Or(a=term1f, b=term2f, out=inter1f);
    Or(a=term3f, b=term4f, out=inter2f);
    Or(a=inter1f, b=inter2f, out=inter3f);
    Or(a=inter3f, b=term5f, out=f);

    // Segment g
    Not(in=A, out=notAg);
    Not(in=B, out=notBg);
    Not(in=C, out=notCg);
    Not(in=D, out=notDg);
    And(a=notBg, b=C, out=term1g);
    And(a=B, b=notCg, out=term2g);
    And(a=B, b=notDg, out=term3g);
    Or(a=term1g, b=term2g, out=inter1g);
    Or(a=inter1g, b=term3g, out=g);
}
