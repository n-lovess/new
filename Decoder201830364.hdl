CHIP Decoder201830364 {
    IN A, B, C, D;
    OUT a, b, c, d, e, f, g;

    PARTS:
    // Segment a
    Not(in=A, out=notA);
    Not(in=B, out=notB);
    Not(in=C, out=notC);
    Not(in=D, out=notD);
    And(a=notA, b=notB, out=term1a);
    And(a=notC, b=notD, out=term2a);
    And(a=A, b=notB, out=term3a);
    Or(a=term1a, b=term2a, out=inter1a);
    Or(a=inter1a, b=term3a, out=a);

    // Segment b
    Not(in=A, out=notA);
    Not(in=B, out=notB);
    Not(in=C, out=notC);
    Not(in=D, out=notD);
    And(a=notA, b=notB, out=term1b);
    And(a=B, b=C, out=term2b);
    And(a=notC, b=notD, out=term3b);
    Or(a=term1b, b=term2b, out=inter1b);
    Or(a=inter1b, b=term3b, out=b);

    // Segment c
    Not(in=A, out=n1);
    Not(in=B, out=n2);
    Not(in=C, out=n3);
    Not(in=D, out=n4);
    And(a=n1, b=n2, out=temp0);
    And(a=temp0, b=n3, out=temp20);
    And(a=temp20, b=n4, out=on0);
    And(a=n1, b=n2, out=temp2);
    And(a=temp2, b=C, out=temp22);
    And(a=temp22, b=n4, out=on2);
    And(a=n1, b=B, out=temp6);
    And(a=temp6, b=C, out=temp26);
    And(a=temp26, b=n4, out=on6);
    And(a=A, b=n2, out=temp8);
    And(a=temp8, b=n3, out=temp28);
    And(a=temp28, b=n4, out=on8);
    And(a=A, b=n2, out=tempA);
    And(a=tempA, b=C, out=temp2A);
    And(a=temp2A, b=n4, out=onA);
    And(a=A, b=n2, out=tempb);
    And(a=tempb, b=C, out=temp2b);
    And(a=temp2b, b=D, out=onb);
    And(a=A, b=B, out=tempC);
    And(a=tempC, b=n3, out=temp2C);
    And(a=temp2C, b=n4, out=onC);
    And(a=A, b=B, out=tempd);
    And(a=tempd, b=n3, out=temp2d);
    And(a=temp2d, b=D, out=ond);
    And(a=A, b=B, out=tempE);
    And(a=tempE, b=C, out=temp2E);
    And(a=temp2E, b=n4, out=onE);
    And(a=A, b=B, out=tempF);
    And(a=tempF, b=C, out=temp2F);
    And(a=temp2F, b=D, out=onF);
    Or(a=on0, b=on2, out=on02);
    Or(a=on02, b=on6, out=on026);
    Or(a=on026, b=on8, out=on0268);
    Or(a=on0268, b=onA, out=on0268A);
    Or(a=on0268A, b=onb, out=on0268Ab);
    Or(a=on0268Ab, b=onC, out=on0268AbC);
    Or(a=on0268AbC, b=ond, out=on0268AbCd);
    Or(a=on0268AbCd, b=onE, out=on0268AbCdE);
    Or(a=on0268AbCdE, b=onF, out=c);

    // Segment d 
    Not(in=A, out=notA);
    Not(in=B, out=notB);
    Not(in=C, out=notC);
    Not(in=D, out=notD);
    And(a=notA, b=B, out=term1d);
    And(a=term1d, b=notC, out=inter1d);
    Or(a=inter1d, b=D, out=d);

    // Segment e
    Not(in=A, out=notA);
    And(a=A, b=C, out=inter1e);
    Or(a=inter1e, b=B, out=e);

    // Segment f
    Not(in=B, out=notB);
    And(a=A, b=notB, out=inter1f);
    Or(a=inter1f, b=C, out=f);

    // Segment g
    Not(in=D, out=notD);
    And(a=A, b=notD, out=inter1g);
    Or(a=inter1g, b=C, out=g);
}
