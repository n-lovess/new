CHIP DecoderSegment201830364 {
    IN A, B, C, D;
    OUT d;

    PARTS:
    // Negations
    Not(in=A, out=notA);
    Not(in=B, out=notB);
    Not(in=C, out=notC);
    Not(in=D, out=notD);

    // Terms for d
    And(a=notA, b=notB, out=term1part1);
    And(a=term1part1, b=notC, out=term1part2);
    And(a=term1part2, b=notD, out=term1); // First term: !A!B!C!D

    And(a=notA, b=C, out=term2); // Second term: !A C

    And(a=notB, b=C, out=term3part1);
    And(a=term3part1, b=notD, out=term3); // Third term: !B C !D

    And(a=B, b=C, out=term4); // Fourth term: B C

    And(a=A, b=notC, out=term5part1);
    And(a=term5part1, b=notD, out=term5); // Fifth term: A !C !D

    And(a=A, b=C, out=term6); // Sixth term: A C

    // Combine all terms
    Or(a=term1, b=term2, out=inter1);
    Or(a=inter1, b=term3, out=inter2);
    Or(a=inter2, b=term4, out=inter3);
    Or(a=inter3, b=term5, out=inter4);
    Or(a=inter4, b=term6, out=d);
}
